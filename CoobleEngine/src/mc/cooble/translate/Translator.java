package mc.cooble.translate;import mc.cooble.core.Game;import mc.cooble.logger.Log;import mc.cooble.saving.Saver;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.HashMap;import java.util.List;/** * translates keys to actual text * reads lang files with saver instance */public final class Translator {    public static final String LANGUAGE_CS = "cs";    public static final String LANGUAGE_EN = "en";    private static HashMap<String, String> dictionary;    private static final boolean showDefualtLoad = false;    private static final boolean showExceptions = false;    private static final boolean ignoreBiggerNumberExceptions = true;    private static boolean languageIsLoaded;    private static String language;    /**     *     * @param saver     * @param language     * @return number of items in dictionary     */    public static int loadLanguage(Saver saver,String language) {        Translator.language=language;        languageIsLoaded = true;        dictionary = new HashMap<>();        String path = saver.DICTIONARY_PATH+ "/lang_" + language + ".txt";        loadFile(path);        List<String> files = saver.getIO().findResource(saver.DIALOG_PATH, "lang_" + language + ".txt");        for (String f : files) {            loadFile(f);        }        return dictionary.size();    }    private static void loadFile(String path) {        String commonPrefix = "";        try (BufferedReader br = new BufferedReader(new InputStreamReader(Game.saver.getIO().getResourceAsStream(path), "UTF8"))) {            String s;            while ((s = br.readLine()) != null) {                if(s.startsWith("->")){                    commonPrefix =s.substring(2);                    if(!commonPrefix.endsWith("."))                        commonPrefix = commonPrefix +".";                }                else if(s.startsWith("<-")){                    commonPrefix ="";                }                else if(s.equals("")||s.startsWith("//")){                    continue;                }                else {                    int indexEquuls = s.indexOf('=');                    if (indexEquuls >= 0) {                        String translated = s.substring(indexEquuls + 1);                        String src = commonPrefix +s.substring(0, indexEquuls);                        if (showDefualtLoad)                            Log.println("*Loaded key: " + src + " <> " + translated);                        if (translated.startsWith("{") && translateTry(src) != null) {                            dictionary.put(src, translateTry(src));                        } else                            dictionary.put(src, translated);                    }                }            }        } catch (Exception e) {            Log.println("cannot load dictionary: " + path, Log.LogType.ERROR);            e.printStackTrace();        }    }    public static String translate(String key) {        if (!languageIsLoaded)          throw  new IllegalStateException("Trying to translate but no lang loaded");        String out = dictionary.get(key);        if (out == null) {            if (ignoreBiggerNumberExceptions && Character.isDigit(key.charAt(key.length() - 1)) && key.charAt(key.length() - 1) != '0')//if we want something ending with number bigger than 0 -> ignore it                return null;            if (showExceptions)                new Exception("Request for non existing name: " + key).printStackTrace();           /* else if(!noConsoleOutput)                Log.println("Request for non existing name: " + key, Log.LogType.WARN);*/        }        return out;    }    /**     * it is possible that key is right     * No error messeages or so just if something is returned or null     *     * @param key     * @return     */    public static String translateTry(String key) {        if (!languageIsLoaded) {            return null;        }        return dictionary.get(key);    }    public static String getLanguage() {        return language;    }}