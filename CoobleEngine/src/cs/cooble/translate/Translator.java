package cs.cooble.translate;import cs.cooble.core.Game;import cs.cooble.logger.Log;import cs.cooble.saving.Saver;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.HashMap;import java.util.List;public final class Translator {    public static final String LANGUAGE_CS = "cs";    public static final String LANGUAGE_EN = "en";    private static String language;    private static HashMap<String, String> dictionary = new HashMap<>();    private static final boolean showDefualtLoad = false;    private static final boolean showExceptions = false;    private static boolean noConsoleOutput = true;    private static final boolean ignoreBiggerNumberExceptions = true;    private static boolean languageIsLoaded;    public static void setLanguage(String lang) {        language = lang;    }    public static void loadLanguage(Saver saver) {        noConsoleOutput=Game.isDebugging;        languageIsLoaded = true;        dictionary = new HashMap<>();        String path = saver.DICTIONARY_PATH+ "/lang_" + language + ".txt";        loadLanguage(path);        List<String> files = saver.findResourceC(saver.DIALOG_PATH, "lang_" + language + ".txt");        for (String f : files) {            loadLanguage(f);        }        Log.println("[Loaded Language: " + language+" with "+dictionary.size()+" items.");    }    private static String commonPrefix;    private static void loadLanguage(String path) {        commonPrefix="";        try (BufferedReader br = new BufferedReader(new InputStreamReader(Game.saver.getResourceAsStream(path), "UTF8"))) {            String s;            while ((s = br.readLine()) != null) {                if(s.startsWith("->")){                    commonPrefix=s.substring(2);                    if(!commonPrefix.endsWith("."))                        commonPrefix=commonPrefix+".";                }                else if(s.startsWith("<-")){                    commonPrefix="";                }                else if(s.equals("")||s.startsWith("//")){                    continue;                }                else {                    int indexEquuls = s.indexOf('=');                    if (indexEquuls >= 0) {                        String translated = s.substring(indexEquuls + 1);                        String src = commonPrefix+s.substring(0, indexEquuls);                        if (showDefualtLoad)                            Log.println("*Loaded key: " + src + " <> " + translated);                        if (translated.startsWith("{") && translateTry(src) != null) {                            dictionary.put(src, translateTry(src));                        } else                            dictionary.put(src, translated);                    }                }            }        } catch (Exception e) {            Log.println("cannot load dictionary: " + path, Log.LogType.ERROR);            e.printStackTrace();        }    }    public static String translate(String key) {        if (!languageIsLoaded) {            new Exception("Trying to translate but no lang loaded").printStackTrace();        }        String out = dictionary.get(key);        if (out == null) {            if (ignoreBiggerNumberExceptions && Character.isDigit(key.charAt(key.length() - 1)) && key.charAt(key.length() - 1) != '0')//if we want something ending with number bigger than 0 -> ignore it                return null;            if (showExceptions)                new Exception("Request for non existing name: " + key).printStackTrace();           /* else if(!noConsoleOutput)                Log.println("Request for non existing name: " + key, Log.LogType.WARN);*/        }        return out;    }    /**     * it is possible that key is right     * No error messeages or so just if something is returned or null     *     * @param key     * @return     */    public static String translateTry(String key) {        if (!languageIsLoaded) {            return null;        }        return dictionary.get(key);    }    public static String getLanguage() {        return language;    }}