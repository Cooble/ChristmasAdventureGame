package cooble.ch.duck;import java.io.Serializable;import java.util.HashMap;import java.util.Iterator;import java.util.Map;/** * Created by Matej on 1.1.2016. */public class NBT implements Serializable {    private Map<String, Integer> integerMap;    private Map<String, String> stringMap;    private Map<String, Boolean> boolMap;    private Map<String, NBT> varMap;    private Map<String, Double> doubleMap;    public NBT() {        integerMap = new HashMap<>();        stringMap = new HashMap<>();        boolMap = new HashMap<>();        varMap = new HashMap<>();        doubleMap = new HashMap<>();    }    public void putString(String key, String value) {        stringMap.put(key, value);    }    public void putInteger(String key, Integer value) {        integerMap.put(key, value);    }    public void putBoolean(String key, Boolean value) {        boolMap.put(key, value);    }    public void putDouble(String key, Double value) {        doubleMap.put(key,value);    }    public String getString(String key) {        return stringMap.get(key);    }    //if values do not exist -> return 0    public int getInteger(String key) {        Integer out  =integerMap.get(key);        if(out==null)            return 0;        return out;    }    public boolean getBoolean(String key) {        Boolean out  =boolMap.get(key);        if(out==null)            return false;        return out;    }    public double getDouble(String key) {        Double out  =doubleMap.get(key);        if(out==null)            return 0;        return out;    }    //values or null    public Double getDoubleOrNull(String key) {        return doubleMap.get(key);    }    public Integer getIntegerOrNull(String key) {        return integerMap.get(key);    }    public Boolean getBooleanOrNull(String key) {        return boolMap.get(key);    }    //can set default values if null    public int getInteger(String key, int defaultVal) {        Integer out = integerMap.get(key);        if (out == null)            return defaultVal;        return out;    }    public boolean getBoolean(String key, boolean defaultVal) {        Boolean out = boolMap.get(key);        if (out == null)            return defaultVal;        return out;    }    public double getDouble(String key,double defaultVal) {        Double out  =doubleMap.get(key);        if(out==null)            return defaultVal;        return out;    }    public NBT getNBT(String key) {        NBT out;        out = varMap.get(key);        if (out != null)            return out;        else {            out = new NBT();            varMap.put(key, out);            return out;        }    }    public void putNBT( String key,NBT val) {        varMap.put(key, val);    }    @Override    public String toString() {       return toString(0);    }    private String toString(int depth) {        String s = "";        String tab = "";        for (int i = 0; i < depth; i++) {            tab+="      ";        }        s += "\n";        s+=tab;        for (int i = 0; i < 20; i++) {            s += "|";        }        s += "\n";        Iterator it = integerMap.entrySet().iterator();        while (it.hasNext()) {            Map.Entry pair = (Map.Entry) it.next();            s+=tab;            s += pair.getKey() + " = " + pair.getValue() + "\n";        }        it = stringMap.entrySet().iterator();        while (it.hasNext()) {            Map.Entry pair = (Map.Entry) it.next();            s+=tab;            s += pair.getKey() + " = " + pair.getValue() + "\n";        }        it = boolMap.entrySet().iterator();        while (it.hasNext()) {            Map.Entry pair = (Map.Entry) it.next();            s+=tab;            s += pair.getKey() + " = " + pair.getValue() + "\n";        }        it = varMap.entrySet().iterator();        while (it.hasNext()) {            Map.Entry pair = (Map.Entry) it.next();            s+=tab;            s += pair.getKey() + " -> " + ((NBT)pair.getValue()).toString(depth+1) + "\n";        }        s += "\n"+tab;        for (int i = 0; i < 20; i++) {            s += "-";        }        s += "\n";        return s;    }}